<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - PandaX</title>
        <link>https://pandax.me/posts/</link>
        <description>All Posts | PandaX</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 27 Jul 2023 23:38:46 -0500</lastBuildDate><atom:link href="https://pandax.me/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Thread Process</title>
    <link>https://pandax.me/thread-process/</link>
    <pubDate>Thu, 27 Jul 2023 23:38:46 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/thread-process/</guid>
    <description><![CDATA[Thread vs Process What is a Thread, really? Short answer:
Thread is a subset of a process Longer answer:
Thread is an independent set of values for CPU registers Detailed answer:
A thread is an execution context for CPU, which is all the information CPU needs to execute instructions. Essentially: More about thread
Thread components: Program counter: keeps track of which instruc­tion to execute next Stack: which contains the execution history Registers: which hold its current working variables Example: A single thread could be displaying the current tab you’re in, and a different thread could be another tab.]]></description>
</item><item>
    <title>Async Programming</title>
    <link>https://pandax.me/async/</link>
    <pubDate>Wed, 26 Jul 2023 21:03:35 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/async/</guid>
    <description><![CDATA[Async Porgramming What is async programming? Async programming is about non-blocking execution between functions.
It enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs,
So we don’t have to wait our time waiting for that long task to be finished
Example Data may take long a long time to submit to/retrieve from a database. With asynchronous programming, the user can move to another screen while the function continues to execute.]]></description>
</item><item>
    <title>Ssr vs Csr</title>
    <link>https://pandax.me/ssr-vs-csr/</link>
    <pubDate>Sun, 23 Jul 2023 13:45:28 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/ssr-vs-csr/</guid>
    <description><![CDATA[When user sends a request to a server, different server responses differently depending on the implementations.
Server side rendering Whenever you visit a website, your browser makes a request to the server. Once the request is done processing, your browser gets back the fully rendered HTML and displays it on the screen. If you then decide to visit a different page on the website, your browser will once again make another request for the new information.]]></description>
</item><item>
    <title>How are blogs built</title>
    <link>https://pandax.me/how-are-blogs-built/</link>
    <pubDate>Wed, 19 Jul 2023 20:43:29 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/how-are-blogs-built/</guid>
    <description><![CDATA[How are most of the websites/blogs built? Really? Typically, there are two layers of website building:
Pull content from local file system (md files) or third party CMS Render the website The first layer - Content pulling Conventional blog engines hosted on GitHub (Hexo, Hugo, Jekyll) host their &ldquo;content&rdquo; in files stored and managed by Git.
Gatsby and Gridsome, besides supporting file-based content sourcing, also have plugins that enables them to pull &ldquo;content&rdquo; from a third-party CMS, whether it&rsquo;s a self-hosted WordPress or Ghost, or a standalone cloud-based solution like Strapi, DatoCMS, or Contentful.]]></description>
</item><item>
    <title>Docker &amp; Kubernetes</title>
    <link>https://pandax.me/docker/</link>
    <pubDate>Fri, 22 Apr 2022 17:36:35 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/docker/</guid>
    <description><![CDATA[Docker About Docker Problem: It works on my machine, but not works on others'
Solution:
VM Docker Docker is a technology for creating and running containers, so we don&rsquo;t need redudent VMs!
Docker allows different machines to share the same environments by using sharing docker image and create same containers
Docker images DockerFile + App files &ndash;&gt; Docker &ndash;&gt; Image (shared to others)
Docker image explains what your environment looks like Docker image contains everything a container needs to run:]]></description>
</item><item>
    <title>Microservices vs Monolith</title>
    <link>https://pandax.me/microservices/</link>
    <pubDate>Fri, 22 Apr 2022 17:35:01 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/microservices/</guid>
    <description><![CDATA[MicroService Take every app function and put it in its own service Runs in its own container Communicate via APIs But if each microservice is implemented in different languages/environment, how do we deploy? Deployment: Use Docker ! Put each microservice into containers
Pros Flexibility (each microservice can be built in different languages/technologies) Less risk in change Independent scaling Faster release cycles Monolith Server-side systme based on single application Pros Good for small team Less complex Less duplication Run fast Cons Highly dependent (single point of failure) Language/Framework Growth Scaling issue Complex deployment Spring Boot Goal Enable quickly built applications Provide common non-functional features Not Spring boot does NOT generate code Spring boot is NOT an application server or a web server Features Quick starter projects with auto configuration]]></description>
</item><item>
    <title>Web Service</title>
    <link>https://pandax.me/web-service/</link>
    <pubDate>Mon, 18 Apr 2022 20:17:54 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/web-service/</guid>
    <description><![CDATA[What is web service Software system designed to support interoperable machine-to-machine interaction over a network.
Three keys:
machine to machine (todo service is not) Interoperable (not platform dependent) Over a network Different kinds of web services SOAP Use XML as exchange format
Adhere to Structure: Envelope - Header - Body
REST The format of request/response is HTTP
resources A resource has an URI, it is what you want to present in your application]]></description>
</item><item>
    <title>Enable Spotlight search on Mac</title>
    <link>https://pandax.me/enable-spotlight/</link>
    <pubDate>Sat, 26 Mar 2022 11:45:57 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/enable-spotlight/</guid>
    <description><![CDATA[Method 1 Navigate to
System Preferences Spotlights Privacy Add your local disk to the list Remove your local disk from the list The above steps will reindex spotlight on the selected disk Method 2 In terminal run:
1 2 sudo mdutil -E / sudo mdutil -a -i on Above commands fixed everything for me]]></description>
</item><item>
    <title>Add Google Analytics to Hugo Blog</title>
    <link>https://pandax.me/add-google-analytics/</link>
    <pubDate>Sat, 05 Mar 2022 22:35:38 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/add-google-analytics/</guid>
    <description><![CDATA[Google Analytics Register a google analytics account
Get your measurement ID that looks like below
G-6ED0IWOAJK Get gtag js script
1 2 3 4 5 6 7 8 &lt;!-- Global site tag (gtag.js) - Google Analytics --&gt; &lt;script async src=&#34;https://www.googletagmanager.com/gtag/js?id=G-6ED0IWOAJK&#34;&gt;&lt;/script&gt; &lt;script&gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(&#39;js&#39;, new Date()); gtag(&#39;config&#39;, &#39;G-6ED0KEHXFZ&#39;); &lt;/script&gt; Hugo blog Find config.toml file, enable google analytics as below 1 2 3 enableGoogleAnalytics = true trackingCodeType = &#34;gtag&#34; trackingID = &#34;G-6ED0IWOAJK&#34; This is my settings above, you may just need]]></description>
</item><item>
    <title>What is API</title>
    <link>https://pandax.me/what-is-api/</link>
    <pubDate>Tue, 01 Mar 2022 18:05:22 -0500</pubDate>
    <author>Author</author>
    <guid>https://pandax.me/what-is-api/</guid>
    <description><![CDATA[What is API Application Programming Interface: allows two applications to talk to each other
What is REST API REST (Representational State Transfer): A set of functions for developers to perform requests and receive responses using HTTP protocol
Challenges under API testing API Documentation (need endpoint, parameters, resources, data) Access to DB (Validate response by comparing response to DB) Authorization overhead (Handle tokens) Core components of HTTP request HTTP request methods URI Resources and parameters Request header (JSON, XML) Request body (message content) What is Payload Payload/body is secured input data sent to API In JSON What is JSON JavaScript Object Notation Data format represented as String-text Authentication Techniques used in API&rsquo;s Session/Cookie based Authentication Basic Authentication Digest Authentication OAuth Why API testing is suitable for automation testing API testing is:]]></description>
</item></channel>
</rss>
